#!/usr/bin/env ruby

require 'unobservable'
require 'singleton'

# movement tick = the time where all the blocks move down.
#
# position is an int coord used for the grid
# location is an int coord used for the screen or fine tuned location on the board.
# i.e. 'location' would say exactly where in a grid square the avatar is location

Coord = Struct.new(:x, :y)

class Cube

  include Unobservable::Support

  # knows how to draw itself.
  # knows its position on the board(grid)
  # moves down each tick
  # will crush the avatar if it lands on him
  # can be destroyd
  # also tracks the list of currently active cubes

  ALL = []

  WIDTH = 5

  attr_event :changed
  attr_accessor :position

  class << self

    include Unobservable::Support

    attr_event :any_changed
  end

  def initialize(position)
    Clock.instance.movement_tick.register :movement_tick
    ALL.push(self)
    @position = position
  end

  def movement_tick

    # move down one square
    # kill player if landed upon
    # emit :changed

    @position.y += 1
    raise_event :changed
    Cube.raise_event :any_changed

    if off_board?
      delete
    end

    if Avatar.instance.collides?(self)
      avatar.kill
    end
  end

  def off_board?
    not Board.instance.coord_within?(@position)
  end


  def destroy
    # destroyed by a bomb
    delete
  end

  def delete
    # no longer needed in the game.
    #
    # no longer draws itself
    # remove itself from any lists of cubes

    ALL.remove(self)

    raise_event :changed
    Cube.raise_event :any_changed
  end

  def draw
    Cube.locations_from_position(@position).each do |location|
      Screen.instance.grid[location.x][location.y] = 'X'
    end
  end

  def self.center_location_from_position(position)
    locations = []
    locations.push(Coord.new(position.x * Cube::WIDTH + Cube::WIDTH/2, position.y * Cube::WIDTH  + Cube::WIDTH/2))
    locations
  end


  def self.locations_from_position(position)
    locations = []
    (0..Cube::WIDTH - 1).each do |x|
      (0..Cube::WIDTH - 1).each do |y|
        locations.push(Coord.new(position.x * Cube::WIDTH + x, position.y * Cube::WIDTH + y))
      end
    end
    locations
  end

  def self.draw_all
    ALL.each {|cube| cube.draw}
  end

end

class GreyCube < Cube

  # when it falls off the board, ends game

  def movement_tick
    if off_board?
      puts "missed a grey cube"
      Game.instance.close
    end

    super
  end

end

=begin
class BlackCube < Cube

  # when destroyed, ends game

  def destroy
    puts "destroyed a black cube"
    Game.instance.close
  end

end
=end

class Avatar

  # knows how to draw itself
  # has a float board position
  # when destroyed, ends game.
  # listens to player for movement commands

  include Singleton
  include Unobservable::Support

  attr_event :changed

  def initialize
    Player.instance.move.register(:move)
    @location = Coord.new(0,0)
  end

  def position
    position_from_location(@location)
  end

  def position_from_location(location)
    # convert and return float coord to grid coord

    Coord.new(location.x / Cube::WIDTH, location.y / Cube::WIDTH )
  end

  def move(x,y)
    # move to position specified
    # unless there is a block in the way
    # or it would be off the map
    #
    new_location = Coord.new(location.x + x,location.y + y)

    if not board.coord_within?(new_location)
      # blocked by the edge
    end

    if Cube::ALL.any? { |cube| cube.position == new_location }
      # blocked by a cube
    end

    @location = new_location

    raise_event :changed
  end

  def kill
    puts "avatar killed"
    Game.instance.close
  end

  def draw
    Screen.instance.grid[position.x][position.y] = 'P'
  end

end

class Board

  include Singleton

  WIDTH = 6
  HEIGHT = 20

  # has a size.
  # knows how to draw itself.
  # doesn't emit any events or listen to any

  def coord_within?(position)
    position.x > 0 and position.y < WIDTH and position.y > 0 and position.y < HEIGHT
  end

  def draw
  end

end

class Bomb

  # knows how to draw itself.
  # also tracks the list of currently active bombs

  include Unobservable::Support

  ALL = []

  attr_event :changed

  class << self
    include Unobservable::Support
    attr_event :any_changed
  end

  def initialize(position)
    ALL.push(self)
    @position = position
  end

  def delete
    ALL.remove(self)
    raise_event :changed
    Bomb.raise_event :any_changed
  end

  def draw
    location = position_to_location(@position)
    Screen.instance.grid[location.x][location.y] = 'T'
  end

  def self.draw_all
    ALL.each {|bomb| bomb.draw}
  end

end

class BigBomb < Bomb

  # waits to player for bomb activation
  # on activate
  #  will destroy all nearby cubes.
  #  will destroy the avatar if nearby

  def activate
    each_nearby_position do |coord|

      # destroy all nearby cubes
      Cube::ALL.each do |cube|
        if cube.position == coord
          cube.destroy
        end
      end

      # destroy avatar if nearby
      if Avatar.instance.position == coord
        avatar.kill
      end
    end

    delete
    raise_event :changed
    Bomb.raise_event :any_changed
  end

  def each_nearby_position
    positions = []
    (-1..1).each do |x_modifier|
      (-1..1).each do |y_modifier|
        coord = Coord.new(@position.x + x_modifier, @position.y + y_modifier)
        if board.coord_within?(coord)
          yield coord
        end
      end
    end
  end

end

module PuzzleGenerator

  class Puzzle

    def initialize
      @grid = []
      (0..Board::WIDTH - 1).each do |x|
        @grid[x] = []
        (0..HEIGHT - 1).each do |y|
          @grid[x][y] = false
        end
      end
    end

    def _drop_bomb_at(random_position)
      (-1..1).each do |x_modifier|
        (-1..1).each do |y_modifier|
          modified_position = Coord.new(random_position.x + x_modifier,random_position.y + y_modifier)
          if modified_position.x > 0 and modified_position.x < Board::WIDTH and modified_position.y > 0 and modified_position.y < PuzzleGenerator::HEIGHT
            @grid[modified_position.x][modified_position.y] = true
          end
        end
      end
    end

    def to_cubes
      (0..Board::WIDTH - 1).each do |x|
        (0..PuzzleGenerator::HEIGHT - 1).each do |y|
          if @grid[x][y]
            GreyCube.new(Coord.new(x,y))
          end
        end
      end
    end

  end

=begin
  builds a puzzle from a solution backwards

  1. starting with a grid, the width of the playboard, but only a few rows in height.
  2. drop a square of 9 cubes, as if unexploding a bomb.
      the placement of the 9 cubes doesn't have to lie completely within this grid.
      cubes falling outside of the grid will just be forgotten.
  3. do this several times in random places, within that grid.

  the number of times we cycled step 3 becomes the "Par" of bombs needed to complete this level.
=end

  HEIGHT = 6

  def self.generate_puzzle

    puzzle = Puzzle.new

    (0..2).each do
      random_position = Coord.new(Random.rand(0..Board::WIDTH),Random.rand(2..HEIGHT))
      puzzle._drop_bomb_at(random_position)
    end

    puzzle
  end

end

class Player # (input)

  include Singleton
  include Unobservable::Support

  # emits input events
  #   activate (bomb)
  #     bomb on the top of the bomb stack
  #   move (with a vector)
  #   end game (escape)

  attr_event :move

  def input_loop
    while true
      c = $stdin.getc
      if c == 'w'
        raise_event :move, 0, -1
      elsif c == 's'
        raise_event :move, 0, 1
      elsif c == 'a'
        raise_event :move, -1, 0
      elsif c == 'd'
        raise_event :move, 1, 0
      elsif c == ' '
        Bomb.new(Avatar.instance.position)
      elsif c == 'q'
        Game.instance.close
      elsif c == "\n"
        bomb = Bomb::ALL.pop
        bomb.activate if bomb
      end

      Screen.instance.draw
    end
  end

end

class Screen

  include Singleton

  # knows how to draw the whole game.
  # owns and manages he window
  #
  # listens to everything, and anything that changes, it redraws
  #   but no faster than a certain speed.
  #   has ot listen to dynamic objects too or changes.

  attr_reader :grid

  def initialize
    Avatar.instance.changed.register :draw
    Cube.any_changed.register :draw
    Bomb.any_changed.register :draw

    @grid = nil
  end

  def clear
    @grid = []
    (0..Cube::WIDTH * Board::WIDTH).each do |x|
      @grid[x] = []
      (0..Cube::WIDTH * Board::HEIGHT).each do |y|
        @grid[x][y] = ' '
      end
    end
  end

  def flush
    (0..Cube::WIDTH * Board::WIDTH).each do |x|
      (0..Cube::WIDTH * Board::HEIGHT).each do |y|
        putc @grid[x][y]
      end
      puts
    end
  end

  def draw

    clear

    Board.instance.draw
    Bomb.draw_all
    Cube.draw_all
    Avatar.instance.draw

    flush
  end

end

class Clock
  include Singleton
  include Unobservable::Support

  attr_event :movement_tick

  # emits movement tick

end

class Game

  # starts the game up
  # checks for any non-owned end-game scenerios, like all cubes gone.

  include Singleton

  def start
    PuzzleGenerator.generate_puzzle.to_cubes

    # create the screen so it starts drawing.
    Screen.instance

    Player.instance.input_loop
  end

  def initialize
    Cube.any_changed.register :close_check
  end

  def close_check
    if Cube.ALL.size == 0
      close
    end
  end

  def close
    exit(0)
  end

end

Game.instance.start
