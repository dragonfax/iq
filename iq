#!/usr/bin/env ruby

require 'unobservable'

# movement tick = the time where all the blocks move down.

class Cube

  include Unobservable::Support

  # knows how to draw itself.
  # knows its position on the board(grid)
  # moves down each tick
  # will crush the avatar if it lands on him
  # can be destroyd
  # also tracks the list of currently active cubes

  def initialize
    Clock.machine_tick.register :movement_tick
  end

  def movement_tick
    move down one square
    kill player if landed upon
    emit changed

    if off_board?
      delete
    end

    if avatar.collides?(self)
      avatar.kill
    end
  end

  def destroy
    # destroyed by a bomb
    delete
    emit destroyed event
  end

  def delete
    # no longer needed in the game.
    no longer draws itself
    can remove itself from any lists of cubes
    emit deleted event
  end

end

class GreyCube < Cube

  # when it falls off the board, ends game

  def movement_tick
    super

    if off_board?
      puts "missed a grey cube"
      Game.close
    end
  end

end

class BlackCube < Cube

  # when destroyed, ends game

  def destroy
    super
    puts "destroyed a black cube"
    Game.close
  end

end

class Avatar

  # knows how to draw itself
  # has a float board position
  # when destroyed, ends game.
  # listens to player for movement commands

  def initialize
    Player.move.register(:move)
    @position = FloatCoord.new(0,0)
  end

  def grid_coord
    convert and return float coord to grid coord
  end

  def move
    move to position specified
    unless there is a block in the way
    or it would be off the map
  end

  def kill
    puts "avatar killed"
    Game.close
  end

end

class Board

  has a size.
  knows how to draw itself.
  doesn't emit any events or listen to any

end

class Bomb

  knows how to draw itself.
  also tracks the list of currently active bombs

  BOMB_STACK = []

end

class BigBomb < Bomb

  # waits to player for bomb activation
  # on activate
  #  will destroy all nearby cubes.
  #  will destroy the avatar if nearby

  def initialize(position)
    @position = position
  end

  def activate
    destroy all nearby cubes
    destroy avatar if nearby
  end

end

class PuzzleGenerator

  builds a puzzle from a solution backwards

end

class Player # (input)

  emits input events
    activate (bomb)
      bomb ont he top of the stack
    move (with a vector)
    end game (escape)

  def initialize
    setup to activate the next bomb on "activate"
  end

end

class Screen

  knows how to draw the whole game.
  owns and manages he window

  listens to everything, and anything that changes, it redraws
    but no faster than a certain speed.
    has ot listen to dynamic objects too or changes.

  def draw

    draw board
    draw bombs
    draw cubes
    draw avatar

    or draw everythiugn from bottom up, back forward.
    or leave it up to opengl, and just create a scenegraph

  end

end

class Game

  creats the board
  creates the screen,
  calls puzzle generator to create the first puzzle
  creates the blocks for that puzzle
  creates everything else if necessary
  starts the movement tick

  listens to cubed.
  if last Cube :deleted, game ends

end
